(function(){var a,b,c,d,e,f=[].slice,g=function(a,b){function c(){this.constructor=a}for(var d in b)h.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},h={}.hasOwnProperty;c=function(){function a(){var a,c,d,e,g,h,i,j,k;if(a=arguments[0],i=2<=arguments.length?f.call(arguments,1):[],this._instance=a,this._destination=this._instance._destination,this.context=this._instance.context,this._incoming=[],this._outgoing=[],this._nodes=[],i instanceof Array||(i=[i]),1===i.length)for(d=0,g=i.length;g>d;d++){if(c=i[d],j=this.__typeof(c),"AudioNode"===j&&this._nodes.push(c),"string"===j)return new b.LEGAL_NODES[c](this._instance);if("Node"===j)return c}else for(e=0,h=i.length;h>e;e++)c=i[e],j=this.__typeof(c),"AudioNode"===j&&(k=c.constructor.name.replace(/Node/,""),this._nodes.push(new b.LEGAL_NODES[k](this._instance))),"string"===j&&this._insert_node(new b.LEGAL_NODES[c](this._instance),0),"Node"===j&&this._nodes.push(c)}return a.prototype.__typeof=function(b){if(b instanceof AudioParam)return"AudioParam";if(b instanceof AudioNode)return"AudioNode";if(b instanceof a)return"Node";switch(typeof b){case"string":return"string";case"number":return"number";case"function":return"function";case"object":return"object";default:throw new Error("__typeof does not pass for "+typeof b)}},a.prototype.insert_node=function(a,b){var c;if(c=this._nodes.length,null==b&&(b=c),b>c)throw new Error("Invalid index given to insert_node: "+b+" out of "+c);return console.log("called insert on",a,b),0===b&&(this.connect_incoming(a),this.disconnect_incoming(this._nodes[0]),c>1&&(a.connect(this.to(this._nodes[0])),console.log("node.connect to ",this._nodes[0]))),b===c&&(0!==b&&this._nodes[b-1].disconnect(this.from(this._destination)),0!==b&&console.log(this._nodes[b-1],"disconnect",this._destination),a.connect(this.to(this._destination)),console.log(a,"connect",this._destination),0!==b&&this._nodes[b-1].connect(this.to(a)),0!==b&&console.log(this._nodes[b-1],"connect",a)),b!==c&&0!==b&&(console.log(this._nodes[b-1],"disconnect",this._nodes[b]),this._nodes[b-1].disconnect(this.from(this._nodes[b])),console.log(this._nodes[b-1],"connect",a),this._nodes[b-1].connect(this.to(a)),console.log(a,"connect",this._nodes[b]),a.connect(this.to(this._nodes[b]))),this._nodes.splice(b,0,a),console.log("spliced:",this._nodes)},a.prototype.connect_incoming=function(){return console.log("do incoming")},a.prototype.disconnect_incoming=function(){return console.log("undo incoming")},a.prototype.connect=function(a,b,c,d){return console.log("called connect on ",this,a),this._nodes[this._nodes.length-1].connect(a)},a.prototype.to=function(a){switch(this.__typeof(a)){case"Node":return a._nodes[0];case"AudioNode":return a;default:throw New(Error("Unknown node type passed to connect"))}},a.prototype.from=a.prototype.to,a.prototype.expose_methods_of=function(a){var b,c,d;c=[];for(b in a)if(d=a[b],null==this[b])switch(this.__typeof(d)){case"function":c.push(this[b]=d.bind(a));break;case"AudioParam":c.push(this[b]=d);break;case"string":case"number":c.push(Object.defineProperty(this,b,{get:function(){return a.key},set:function(b){return a.key=b}}));break;default:c.push(void 0)}return c},a.prototype.connect_base_node=function(a,b,c,d){var e,f,g,h,i;switch(console.log("reconnecting",a,b,c,d),h=typeof b,g="string"===h,h){case"string":case"undefined":f=!!c,e=!!d;break;case"number":i=[b,c,void 0],c=i[0],d=i[1],b=i[2],f=!!c,e=!!d;break;default:throw new Error("Param argument specified but is not string or number.")}return a instanceof AudioNode&&(a.base_node=a),g?f?this.base_node.connect(a.base_node[b],c):this.base_node.connect(a.base_node[b]):f&&e?this.base_node.connect(a.base_node,c,d):f?this.base_node.connect(a.base_node,c):this.base_node.connect(a.base_node)},a.prototype.receive_connect=function(a,b,c){return null!=arguments[2]?this._incoming.push([a,b,c]):this._incoming.push([a,b])},a}(),a=function(a){function b(){var a,c;a=arguments[0],c=2<=arguments.length?f.call(arguments,1):[],this._instance=a,b.__super__.constructor.apply(this,arguments),this.insert_node(this.context.createGain(),0),this.expose_methods_of(this._nodes[0])}return g(b,a),b}(c),d=function(b){function c(){var b,d;b=arguments[0],d=2<=arguments.length?f.call(arguments,1):[],this._instance=b,c.__super__.constructor.apply(this,arguments),this.insert_node(this.context.createOscillator(),0),this.insert_node(new a(this._instance,"Gain")),this._is_started=!1}return g(c,b),c.prototype.start=function(){return this._is_started?this._nodes[1].gain.value=1:(this._nodes[0].start(),this._is_started=!0)},c.prototype.stop=function(){return this._nodes[1].gain.value=0},c}(c),e=function(a){function b(){var a,c;a=arguments[0],c=2<=arguments.length?f.call(arguments,1):[],this._instance=a,b.__super__.constructor.apply(this,arguments)}return g(b,a),b}(c),b=function(){function b(a){this.initOb=a,this._BROWSER_CONSTRUCTOR=!1,this.context=this.create_context(),this._destination=this.context.destination,this._nodes={},this._connections={},this._node_id_count=1}return b.LEGAL_NODES={Oscillator:d,StereoPanner:e,Gain:a},b.prototype.create_context=function(){if(null!=window.AudioContext)return this._BROWSER_CONSTRUCTOR="AudioContext",new AudioContext;if(null!=window.webkitAudioContext)return this._BROWSER_CONSTRUCTOR="webkitAudioContext",new webkitAudioContext;throw new Error("This browser does not yet support the AudioContext API")},b.prototype.node=function(){var a,b,d;return a=arguments[0],b=2<=arguments.length?f.call(arguments,1):[],null!=(null!=(d=this._nodes)?d[a]:void 0)?this._nodes[a]:this._nodes[a]=function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(c,[this].concat(f.call(b)),function(){})},b.prototype.create_connection=function(a,b){var c;return null!=(c=this._connections[a])?c[b]=!0:void 0},b.prototype.delete_connection=function(a,b){var c;return null!=(c=this._connections[a])?delete c[b]:void 0},b.prototype.next_node_id=function(){return this._node_id_count+=1,"_node"+this._node_id_count},b}(),window.Mooog=b}).call(this);
//# sourceMappingURL=mooog.min.js.map